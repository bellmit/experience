# application config
application {
    online = "2010-08-01"
    time_tolerance = 1440 # unit: minutes
    data_archive_path = "data/archive"
    data_log_path = "data/log"
    log_backup_path = "data/log_backup"
}

telnet {
    port = 8787
    max_client = 10
    login_password = "password"
    admin_password = "admin"
}

# file log module
log = {
    size = 64 # log file size, unit: MB
    block = 4 # size of read file block per read, unit: KB
    flush_cycle = 5 # force flush to disk for this time, unit: second
    flush_count = 500000 # force flush to disk when the count reach this count
    queue_warning_size = 1000000 # warn when the log queue reach this size
}

# memory DB module
mem = {
    size = 1024 # 内存库大小，单位M
}

# history DB module
disk = {
    db = leveldb # 第三方DB方案，如leveldb/bdb/bangdb/hadoop
    storeStrategy = monthly # 存储库 分库策略，可以是：monthly/yearly/always
    level = {
        // LevelDB连接保持时间，单位为秒，当超过这么长时间没有使用时，关闭该连接
        keep_connection_time = 60

        // check if has connection need to close periodically, unit second
        check_close_cycle = 5

        // true: compress with snappy, false: not compress
        compression = true

        // defines the key count threshold for a new key entry in the key index for a block.
        // Most clients should leave this parameter alone.
        block_restart_interval = 16

        // write buffer size
        write_buffer_size = 4194304

        // defines the size threshold for a block / chunk of data within one .sst table file.
        // Each new block gets an index entry in the .sst table file's master index.
        block_size = 16384 // 16M

        // The cache_size determines how much data LevelDB caches in memory.
        cache_size = 0

        // 如果库不存在，则创建
        create_if_missing = true

        error_if_exists = false

        // 最小30，随机读 Memory budgeting for this variable is more important to random read operations than the cache_size discussed next.
        max_open_files = 1000

        paranoid_checks = false

        // controls whether or not validation occurs when Riak requests data from the leveldb database on behalf of the user.
        verify_checksums = true
    }
}

# net module
net = {
    port = {
        api = 6767
        kernel = 6768
        tagMeta = 6769
        tagCalculate = 6760
    }

    agent = {
        name = "admin"
        password = "admin"
    }

    ping_interval = 5
}

# stats module
stats = {
    running = true # 是否采集统计信息
    period = 900 # 统计周期，单位为秒
}

emq {
    host = "192.168.2.28"
    port = 61616
}
